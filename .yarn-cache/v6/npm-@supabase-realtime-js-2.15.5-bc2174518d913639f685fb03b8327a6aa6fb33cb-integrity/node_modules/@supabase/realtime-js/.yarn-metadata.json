{
  "manifest": {
    "name": "@supabase/realtime-js",
    "version": "2.15.5",
    "description": "Listen to realtime updates to your PostgreSQL database",
    "keywords": [
      "realtime",
      "phoenix",
      "elixir",
      "javascript",
      "typescript",
      "firebase",
      "supabase"
    ],
    "homepage": "https://github.com/supabase/realtime-js",
    "bugs": {
      "url": "https://github.com/supabase/realtime-js/issues"
    },
    "files": [
      "dist",
      "src"
    ],
    "main": "dist/main/index.js",
    "module": "dist/module/index.js",
    "types": "dist/module/index.d.ts",
    "repository": {
      "type": "git",
      "url": "https://github.com/supabase/realtime-js"
    },
    "author": {
      "name": "Supabase"
    },
    "license": "MIT",
    "scripts": {
      "clean": "rimraf dist docs/v2",
      "format": "prettier --write \"{src,test}/**/*.ts\"",
      "build": "run-s clean format build:*",
      "build:main": "tsc -p tsconfig.json",
      "build:module": "tsc -p tsconfig.module.json",
      "test": "vitest run",
      "test:watch": "vitest",
      "coverage": "vitest run --coverage",
      "coverage:text": "vitest run --coverage.enabled true --coverage.reporter=text",
      "docs": "typedoc src/index.ts --out docs/v2",
      "docs:json": "typedoc --json docs/v2/spec.json --excludeExternals src/index.ts",
      "check-exports": "attw --pack .",
      "ci": "run-s test coverage"
    },
    "dependencies": {
      "@supabase/node-fetch": "^2.6.13",
      "@types/phoenix": "^1.6.6",
      "ws": "^8.18.2",
      "@types/ws": "^8.18.1"
    },
    "devDependencies": {
      "@arethetypeswrong/cli": "^0.16.4",
      "@vitest/coverage-v8": "^3.1.4",
      "eslint": "^9.27.0",
      "esm": "^3.2.25",
      "jsdom": "^16.7.0",
      "jsdom-global": "3.0.0",
      "jsonwebtoken": "^9.0.2",
      "mock-socket": "^9.3.1",
      "npm-run-all": "^4.1.5",
      "nyc": "^15.1.0",
      "prettier": "^2.8.8",
      "semantic-release-plugin-update-version-in-files": "^1.1.0",
      "typedoc": "^0.27.9",
      "typescript": "^5.8.3",
      "vitest": "^3.1.4",
      "web-worker": "1.2.0"
    },
    "_registry": "npm",
    "_loc": "/Users/schandel/Downloads/BPL Commander Project Management App (Copy)/.yarn-cache/v6/npm-@supabase-realtime-js-2.15.5-bc2174518d913639f685fb03b8327a6aa6fb33cb-integrity/node_modules/@supabase/realtime-js/package.json",
    "readmeFilename": "README.md",
    "readme": "<br />\n<p align=\"center\">\n  <a href=\"https://supabase.io\">\n        <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/supabase/supabase/master/packages/common/assets/images/supabase-logo-wordmark--dark.svg\">\n      <source media=\"(prefers-color-scheme: light)\" srcset=\"https://raw.githubusercontent.com/supabase/supabase/master/packages/common/assets/images/supabase-logo-wordmark--light.svg\">\n      <img alt=\"Supabase Logo\" width=\"300\" src=\"https://raw.githubusercontent.com/supabase/supabase/master/packages/common/assets/images/logo-preview.jpg\">\n    </picture>\n  </a>\n\n  <h1 align=\"center\">Supabase Realtime Client</h1>\n\n  <h3 align=\"center\">Send ephemeral messages with <b>Broadcast</b>, track and synchronize state with <b>Presence</b>, and listen to database changes with <b>Postgres Change Data Capture (CDC)</b>.</h3>\n\n  <p align=\"center\">\n    <a href=\"https://supabase.com/docs/guides/realtime\">Guides</a>\n    ·\n    <a href=\"https://supabase.com/docs/reference/javascript\">Reference Docs</a>\n    ·\n    <a href=\"https://multiplayer.dev\">Multiplayer Demo</a>\n  </p>\n</p>\n\n<div align=\"center\">\n\n[![pkg.pr.new](https://pkg.pr.new/badge/supabase/realtime-js)](https://pkg.pr.new/~/supabase/realtime-js)\n\n</div>\n\n# Overview\n\nThis client enables you to use the following Supabase Realtime's features:\n\n- **Broadcast**: send ephemeral messages from client to clients with minimal latency. Use cases include sharing cursor positions between users.\n- **Presence**: track and synchronize shared state across clients with the help of CRDTs. Use cases include tracking which users are currently viewing a specific webpage.\n- **Postgres Change Data Capture (CDC)**: listen for changes in your PostgreSQL database and send them to clients.\n\n# Usage\n\n## Installing the Package\n\n```bash\nnpm install @supabase/realtime-js\n```\n\n## Creating a Channel\n\n```js\nimport { RealtimeClient } from '@supabase/realtime-js'\n\nconst client = new RealtimeClient(REALTIME_URL, {\n  params: {\n    apikey: API_KEY\n  },\n})\n\nconst channel = client.channel('test-channel', {})\n\nchannel.subscribe((status, err) => {\n  if (status === 'SUBSCRIBED') {\n    console.log('Connected!')\n  }\n\n  if (status === 'CHANNEL_ERROR') {\n    console.log(`There was an error subscribing to channel: ${err.message}`)\n  }\n\n  if (status === 'TIMED_OUT') {\n    console.log('Realtime server did not respond in time.')\n  }\n\n  if (status === 'CLOSED') {\n    console.log('Realtime channel was unexpectedly closed.')\n  }\n})\n```\n\n### Notes:\n\n- `REALTIME_URL` is `'ws://localhost:4000/socket'` when developing locally and `'wss://<project_ref>.supabase.co/realtime/v1'` when connecting to your Supabase project.\n- `API_KEY` is a JWT whose claims must contain `exp` and `role` (existing database role).\n- Channel name can be any `string`.\n\n## Broadcast\n\nYour client can send and receive messages based on the `event`.\n\n```js\n// Setup...\n\nconst channel = client.channel('broadcast-test', { config: { broadcast: { ack: false, self: false } } })\n\nchannel.on('broadcast', { event: 'some-event' }, (payload) =>\n  console.log(payload)\n)\n\nchannel.subscribe(async (status) => {\n  if (status === 'SUBSCRIBED') {\n    // Send message to other clients listening to 'broadcast-test' channel\n    await channel.send({\n      type: 'broadcast',\n      event: 'some-event',\n      payload: { hello: 'world' },\n    })\n  }\n})\n```\n\n### Notes:\n\n- Setting `ack` to `true` means that the `channel.send` promise will resolve once server replies with acknowledgement that it received the broadcast message request.\n- Setting `self` to `true` means that the client will receive the broadcast message it sent out.\n- Setting `private` to `true` means that the client will use RLS to determine if the user can connect or not to a given channel.\n\n## Presence\n\nYour client can track and sync state that's stored in the channel.\n\n```js\n// Setup...\n\nconst channel = client.channel(\n  'presence-test',\n  {\n    config: {\n      presence: {\n        key: ''\n      }\n    }\n  }\n)\n\nchannel.on('presence', { event: 'sync' }, () => {\n  console.log('Online users: ', channel.presenceState())\n})\n\nchannel.on('presence', { event: 'join' }, ({ newPresences }) => {\n  console.log('New users have joined: ', newPresences)\n})\n\nchannel.on('presence', { event: 'leave' }, ({ leftPresences }) => {\n  console.log('Users have left: ', leftPresences)\n})\n\nchannel.subscribe(async (status) => {\n  if (status === 'SUBSCRIBED') {\n    const status = await channel.track({ 'user_id': 1 })\n    console.log(status)\n  }\n})\n```\n\n## Postgres CDC\n\nReceive database changes on the client.\n\n```js\n// Setup...\n\nconst channel = client.channel('db-changes')\n\nchannel.on('postgres_changes', { event: '*', schema: 'public' }, (payload) => {\n  console.log('All changes in public schema: ', payload)\n})\n\nchannel.on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'messages' }, (payload) => {\n  console.log('All inserts in messages table: ', payload)\n})\n\nchannel.on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'users', filter: 'username=eq.Realtime' }, (payload) => {\n  console.log('All updates on users table when username is Realtime: ', payload)\n})\n\nchannel.subscribe(async (status) => {\n  if (status === 'SUBSCRIBED') {\n    console.log('Ready to receive database changes!')\n  }\n})\n```\n\n## Get All Channels\n\nYou can see all the channels that your client has instantiatied.\n\n```js\n// Setup...\n\nclient.getChannels()\n```\n\n## Cleanup\n\nIt is highly recommended that you clean up your channels after you're done with them.\n\n- Remove a single channel\n\n```js\n// Setup...\n\nconst channel = client.channel('some-channel-to-remove')\n\nchannel.subscribe()\n\nclient.removeChannel(channel)\n```\n\n- Remove all channels\n\n```js\n// Setup...\n\nconst channel1 = client.channel('a-channel-to-remove')\nconst channel2 = client.channel('another-channel-to-remove')\n\nchannel1.subscribe()\nchannel2.subscribe()\n\nclient.removeAllChannels()\n```\n\n## Credits\n\nThis repo draws heavily from [phoenix-js](https://github.com/phoenixframework/phoenix/tree/master/assets/js/phoenix).\n\n## License\n\nMIT.\n",
    "licenseText": "# MIT License\n\nCopyright (c) 2020 Supabase\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.15.5.tgz#bc2174518d913639f685fb03b8327a6aa6fb33cb",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/@supabase/realtime-js/-/realtime-js-2.15.5.tgz",
    "hash": "bc2174518d913639f685fb03b8327a6aa6fb33cb",
    "integrity": "sha512-/Rs5Vqu9jejRD8ZeuaWXebdkH+J7V6VySbCZ/zQM93Ta5y3mAmocjioa/nzlB6qvFmyylUgKVS1KpE212t30OA==",
    "registry": "npm",
    "packageName": "@supabase/realtime-js",
    "cacheIntegrity": "sha512-/Rs5Vqu9jejRD8ZeuaWXebdkH+J7V6VySbCZ/zQM93Ta5y3mAmocjioa/nzlB6qvFmyylUgKVS1KpE212t30OA== sha1-vCF0UY2RNjn2hfsDuDJ6aqb7M8s="
  },
  "registry": "npm",
  "hash": "bc2174518d913639f685fb03b8327a6aa6fb33cb"
}