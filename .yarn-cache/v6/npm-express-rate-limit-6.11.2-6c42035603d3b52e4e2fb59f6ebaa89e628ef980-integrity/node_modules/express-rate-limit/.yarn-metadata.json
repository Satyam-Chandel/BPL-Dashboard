{
  "manifest": {
    "name": "express-rate-limit",
    "version": "6.11.2",
    "description": "Basic IP rate-limiting middleware for Express. Use to limit repeated requests to public APIs and/or endpoints such as password reset.",
    "author": {
      "name": "Nathan Friedly",
      "url": "http://nfriedly.com/"
    },
    "license": "MIT",
    "homepage": "https://github.com/express-rate-limit/express-rate-limit",
    "repository": {
      "type": "git",
      "url": "https://github.com/express-rate-limit/express-rate-limit"
    },
    "keywords": [
      "express-rate-limit",
      "express",
      "rate",
      "limit",
      "ratelimit",
      "rate-limit",
      "middleware",
      "ip",
      "auth",
      "authorization",
      "security",
      "brute",
      "force",
      "bruteforce",
      "brute-force",
      "attack"
    ],
    "type": "module",
    "exports": {
      ".": {
        "import": {
          "types": "./dist/index.d.mts",
          "default": "./dist/index.mjs"
        },
        "require": {
          "types": "./dist/index.d.cts",
          "default": "./dist/index.cjs"
        }
      }
    },
    "main": "./dist/index.cjs",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist/",
      "tsconfig.json",
      "package.json",
      "readme.md",
      "license.md",
      "changelog.md"
    ],
    "engines": {
      "node": ">= 14"
    },
    "scripts": {
      "clean": "del-cli dist/ coverage/ *.log *.tmp *.bak *.tgz",
      "build:cjs": "esbuild --platform=node --bundle --target=es2019 --format=cjs --outfile=dist/index.cjs --footer:js=\"module.exports = rateLimit; module.exports.default = rateLimit; module.exports.rateLimit = rateLimit; module.exports.MemoryStore = MemoryStore;\" source/index.ts",
      "build:esm": "esbuild --platform=node --bundle --target=es2019 --format=esm --outfile=dist/index.mjs source/index.ts",
      "build:types": "dts-bundle-generator --out-file=dist/index.d.ts source/index.ts && cp dist/index.d.ts dist/index.d.cts && cp dist/index.d.ts dist/index.d.mts",
      "compile": "run-s clean build:*",
      "lint:code": "xo",
      "lint:rest": "prettier --check .",
      "lint": "run-s lint:*",
      "format:code": "xo --fix",
      "format:rest": "prettier --write .",
      "format": "run-s format:*",
      "test:lib": "cross-env NODE_NO_WARNINGS=1 NODE_OPTIONS=--experimental-vm-modules jest --config config/jest.json",
      "test:ext": "cd test/external/ && bash run-all-tests",
      "test": "run-s lint test:lib",
      "pre-commit": "lint-staged",
      "prepare": "run-s compile && husky install config/husky"
    },
    "peerDependencies": {
      "express": "^4 || ^5"
    },
    "devDependencies": {
      "@express-rate-limit/prettier": "1.0.0",
      "@express-rate-limit/tsconfig": "1.0.0",
      "@jest/globals": "29.6.2",
      "@types/express": "4.17.17",
      "@types/jest": "29.5.3",
      "@types/node": "20.4.0",
      "@types/supertest": "2.0.12",
      "cross-env": "7.0.3",
      "del-cli": "5.0.0",
      "dts-bundle-generator": "7.0.0",
      "esbuild": "0.18.11",
      "express": "4.18.2",
      "husky": "8.0.3",
      "jest": "29.6.2",
      "lint-staged": "13.2.3",
      "npm-run-all": "4.1.5",
      "ratelimit-header-parser": "0.1.0",
      "supertest": "6.3.3",
      "ts-jest": "29.1.1",
      "ts-node": "10.9.1",
      "typescript": "4.9.5",
      "xo": "0.54.2"
    },
    "xo": {
      "prettier": true,
      "rules": {
        "@typescript-eslint/no-empty-function": 0,
        "@typescript-eslint/no-dynamic-delete": 0,
        "@typescript-eslint/no-confusing-void-expression": 0,
        "@typescript-eslint/consistent-indexed-object-style": [
          "error",
          "index-signature"
        ],
        "n/no-unsupported-features/es-syntax": 0
      },
      "overrides": [
        {
          "files": "test/library/*.ts",
          "rules": {
            "@typescript-eslint/no-unsafe-argument": 0,
            "@typescript-eslint/no-unsafe-assignment": 0
          }
        }
      ],
      "ignore": [
        "test/external"
      ]
    },
    "prettier": "@express-rate-limit/prettier",
    "lint-staged": {
      "{source,test}/**/*.ts": "xo --fix",
      "**/*.{json,yaml,md}": "prettier --write "
    },
    "_registry": "npm",
    "_loc": "/Users/schandel/Downloads/BPL Commander Project Management App (Copy)/.yarn-cache/v6/npm-express-rate-limit-6.11.2-6c42035603d3b52e4e2fb59f6ebaa89e628ef980-integrity/node_modules/express-rate-limit/package.json",
    "readmeFilename": "readme.md",
    "readme": "# <div align=\"center\"> Express Rate Limit </div>\n\n---\n\nSponsored by [Zuplo](https://zuplo.link/express-rate-limit) a fully-managed API\nGateway for developers. Add\n[dynamic rate-limiting](https://zuplo.link/dynamic-rate-limiting),\nauthentication and more to any API in minutes. Learn more at\n[zuplo.com](https://zuplo.link/express-rate-limit)\n\n---\n\n<div align=\"center\">\n\n[![tests](https://github.com/express-rate-limit/express-rate-limit/actions/workflows/ci.yaml/badge.svg)](https://github.com/express-rate-limit/express-rate-limit/actions/workflows/ci.yaml)\n[![npm version](https://img.shields.io/npm/v/express-rate-limit.svg)](https://npmjs.org/package/express-rate-limit 'View this project on NPM')\n[![npm downloads](https://img.shields.io/npm/dm/express-rate-limit)](https://www.npmjs.com/package/express-rate-limit)\n\nBasic rate-limiting middleware for [Express](http://expressjs.com/). Use to\nlimit repeated requests to public APIs and/or endpoints such as password reset.\nPlays nice with\n[express-slow-down](https://www.npmjs.com/package/express-slow-down).\n\n</div>\n\n## Use Cases\n\nDepending on your use case, you may need to switch to a different\n[store](#store).\n\n#### Abuse Prevention\n\nThe default `MemoryStore` is probably fine.\n\n#### API Rate Limit Enforcement\n\nYou likely want to switch to a different [store](#store). As a performance\noptimization, the default `MemoryStore` uses a global time window, so if your\nlimit is 10 requests per minute, a single user might be able to get an initial\nburst of up to 20 requests in a row if they happen to get the first 10 in at the\nend of one minute and the next 10 in at the start of the next minute. (After the\ninitial burst, they will be limited to the expected 10 requests per minute.) All\nother stores use per-user time windows, so a user will get exactly 10 requests\nregardless.\n\nAdditionally, if you have multiple servers or processes (for example, with the\n[node:cluster](https://nodejs.org/api/cluster.html) module), you'll likely want\nto use an external data store to syhcnronize hits\n([redis](https://npmjs.com/package/rate-limit-redis),\n[memcached](https://npmjs.org/package/rate-limit-memcached), [etc.](#store))\nThis will guarentee the expected result even if some requests get handled by\ndifferent servers/processes.\n\n### Alternate Rate Limiters\n\nThis module was designed to only handle the basics and didn't even support\nexternal stores initially. These other options all are excellent pieces of\nsoftware and may be more appropriate for some situations:\n\n- [`rate-limiter-flexible`](https://www.npmjs.com/package/rate-limiter-flexible)\n- [`express-brute`](https://www.npmjs.com/package/express-brute)\n- [`rate-limiter`](https://www.npmjs.com/package/express-limiter)\n\n## Installation\n\nFrom the npm registry:\n\n```sh\n# Using npm\n> npm install express-rate-limit\n# Using yarn or pnpm\n> yarn/pnpm add express-rate-limit\n```\n\nFrom Github Releases:\n\n```sh\n# Using npm\n> npm install https://github.com/express-rate-limit/express-rate-limit/releases/download/v{version}/express-rate-limit.tgz\n# Using yarn or pnpm\n> yarn/pnpm add https://github.com/express-rate-limit/express-rate-limit/releases/download/v{version}/express-rate-limit.tgz\n```\n\nReplace `{version}` with the version of the package that you want to your, e.g.:\n`6.0.0`.\n\n## Usage\n\n### Importing\n\nThis library is provided in ESM as well as CJS forms, and works with both\nJavascript and Typescript projects.\n\n**This package requires you to use Node 14 or above.**\n\nImport it in a CommonJS project (`type: commonjs` or no `type` field in\n`package.json`) as follows:\n\n```ts\nconst { rateLimit } = require('express-rate-limit')\n```\n\nImport it in a ESM project (`type: module` in `package.json`) as follows:\n\n```ts\nimport { rateLimit } from 'express-rate-limit'\n```\n\n### Examples\n\nTo use it in an API-only server where the rate-limiter should be applied to all\nrequests:\n\n```ts\nimport { rateLimit } from 'express-rate-limit'\n\nconst limiter = rateLimit({\n\twindowMs: 15 * 60 * 1000, // 15 minutes\n\tmax: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\n\tstandardHeaders: 'draft-7', // draft-6: RateLimit-* headers; draft-7: combined RateLimit header\n\tlegacyHeaders: false, // X-RateLimit-* headers\n\t// store: ... , // Use an external store for more precise rate limiting\n})\n\n// Apply the rate limiting middleware to all requests\napp.use(limiter)\n```\n\nTo use it in a 'regular' web server (e.g. anything that uses\n`express.static()`), where the rate-limiter should only apply to certain\nrequests:\n\n```ts\nimport { rateLimit } from 'express-rate-limit'\n\nconst apiLimiter = rateLimit({\n\twindowMs: 15 * 60 * 1000, // 15 minutes\n\tmax: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\n\tstandardHeaders: 'draft-7', // Set `RateLimit` and `RateLimit-Policy`` headers\n\tlegacyHeaders: false, // Disable the `X-RateLimit-*` headers\n\t// store: ... , // Use an external store for more precise rate limiting\n})\n\n// Apply the rate limiting middleware to API calls only\napp.use('/api', apiLimiter)\n```\n\nTo create multiple instances to apply different rules to different endpoints:\n\n```ts\nimport { rateLimit } from 'express-rate-limit'\n\nconst apiLimiter = rateLimit({\n\twindowMs: 15 * 60 * 1000, // 15 minutes\n\tmax: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\n\tstandardHeaders: 'draft-7', // draft-6: RateLimit-* headers; draft-7: combined RateLimit header\n\tlegacyHeaders: false, // X-RateLimit-* headers\n\t// store: ... , // Use an external store for more precise rate limiting\n})\n\napp.use('/api/', apiLimiter)\n\nconst createAccountLimiter = rateLimit({\n\twindowMs: 60 * 60 * 1000, // 1 hour\n\tmax: 5, // Limit each IP to 5 create account requests per `window` (here, per hour)\n\tmessage:\n\t\t'Too many accounts created from this IP, please try again after an hour',\n\tstandardHeaders: 'draft-7', // draft-6: RateLimit-* headers; draft-7: combined RateLimit header\n\tlegacyHeaders: false, // X-RateLimit-* headers\n})\n\napp.post('/create-account', createAccountLimiter, (request, response) => {\n\t//...\n})\n```\n\nTo use a custom store:\n\n```ts\nimport { rateLimit } from 'express-rate-limit'\nimport RedisStore from 'rate-limit-redis'\nimport RedisClient from 'ioredis'\n\nconst redisClient = new RedisClient()\nconst rateLimiter = rateLimit({\n\twindowMs: 15 * 60 * 1000, // 15 minutes\n\tmax: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes)\n\tstandardHeaders: 'draft-7', // draft-6: RateLimit-* headers; draft-7: combined RateLimit header\n\tlegacyHeaders: false, // X-RateLimit-* headers\n\tstore: new RedisStore({\n\t\t/* ... */\n\t}), // Use the external store\n})\n\n// Apply the rate limiting middleware to all requests\napp.use(rateLimiter)\n```\n\n> **Note:** most stores will require additional configuration, such as custom\n> prefixes, when using multiple instances. The default built-in memory store is\n> an exception to this rule.\n\n### Troubleshooting Proxy Issues\n\nIf you are behind a proxy/load balancer (usually the case with most hosting\nservices, e.g. Heroku, Bluemix, AWS ELB, Nginx, Cloudflare, Akamai, Fastly,\nFirebase Hosting, Rackspace LB, Riverbed Stingray, etc.), the IP address of the\nrequest might be the IP of the load balancer/reverse proxy (making the rate\nlimiter effectively a global one and blocking all requests once the limit is\nreached) or `undefined`. To solve this issue, add the following line to your\ncode (right after you create the express application):\n\n```ts\napp.set('trust proxy', numberOfProxies)\n```\n\nWhere `numberOfProxies` is the number of proxies between the user and the\nserver. To find the correct number, create a test endpoint that returns the\nclient IP:\n\n```ts\napp.set('trust proxy', 1)\napp.get('/ip', (request, response) => response.send(request.ip))\n```\n\nGo to `/ip` and see the IP address returned in the response. If it matches your\npublic IP address, then the number of proxies is correct and the rate limiter\nshould now work correctly. If not, then keep increasing the number until it\ndoes.\n\nFor more information about the `trust proxy` setting, take a look at the\n[official Express documentation](https://expressjs.com/en/guide/behind-proxies.html).\n\n## Configuration\n\n### `windowMs`\n\n> `number`\n\nTime frame for which requests are checked/remembered. Also used in the\n`Retry-After` header when the limit is reached.\n\nNote: with stores that do not implement the `init` function (see the table in\nthe [`stores` section below](#stores)), you may need to configure this value\ntwice, once here and once on the store. In some cases the units also differ\n(e.g. seconds vs miliseconds).\n\nDefaults to `60000` ms (= 1 minute).\n\n### `max`\n\n> `number | function`\n\nThe maximum number of connections to allow during the `window` before rate\nlimiting the client.\n\nCan be the limit itself as a number or a (sync/async) function that accepts the\nExpress `request` and `response` objects and then returns a number.\n\nDefaults to `5`. Set it to `0` to disable the rate limiter.\n\nAn example of using a function:\n\n```ts\nconst isPremium = async (user) => {\n\t// ...\n}\n\nconst limiter = rateLimit({\n\t// ...\n\tmax: async (request, response) => {\n\t\tif (await isPremium(request.user)) return 10\n\t\telse return 5\n\t},\n})\n```\n\n### `message`\n\n> `any`\n\nThe response body to send back when a client is rate limited.\n\nMay be a `string`, JSON object, or any other value that Express's\n[`response.send`](https://expressjs.com/en/4x/api.html#res.send) method\nsupports. It can also be a (sync/async) function that accepts the Express\nrequest and response objects and then returns a `string`, JSON object or any\nother value the Express `response.send` function accepts.\n\nDefaults to `'Too many requests, please try again later.'`\n\nAn example of using a function:\n\n```ts\nconst isPremium = async (user) => {\n\t// ...\n}\n\nconst limiter = rateLimit({\n\t// ...\n\tmessage: async (request, response) => {\n\t\tif (await isPremium(request.user))\n\t\t\treturn 'You can only make 10 requests every hour.'\n\t\telse return 'You can only make 5 requests every hour.'\n\t},\n})\n```\n\n### `statusCode`\n\n> `number`\n\nThe HTTP status code to send back when a client is rate limited.\n\nDefaults to `429` (HTTP 429 Too Many Requests - RFC 6585).\n\n### `legacyHeaders`\n\n> `boolean`\n\nWhether to send the legacy rate limit headers for the limit\n(`X-RateLimit-Limit`), current usage (`X-RateLimit-Remaining`) and reset time\n(if the store provides it) (`X-RateLimit-Reset`) on all responses. If set to\n`true`, the middleware also sends the `Retry-After` header on all blocked\nrequests.\n\nDefaults to `true` (for backward compatibility).\n\n> Renamed in `6.x` from `headers` to `legacyHeaders`.\n\n### `standardHeaders`\n\n> `boolean` | `'draft-6'` | `'draft-7'`\n\nWhether to enable support for headers conforming to the\n[RateLimit header fields for HTTP standardization draft](https://github.com/ietf-wg-httpapi/ratelimit-headers)\nadopted by the IETF.\n\nIf set to `draft-6`, separate `RateLimit-Policy` `RateLimit-Limit`,\n`RateLimit-Remaining`, and, if the store supports it, `RateLimit-Reset` headers\nare set on the response, in accordance with\n[draft-ietf-httpapi-ratelimit-headers-06](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers-06).\n\nIf set to `draft-7`, a combined `RateLimit` header is set containing limit,\nremaining, and reset values, and a `RateLimit-Policy` header is set, in\naccordiance with\n[draft-ietf-httpapi-ratelimit-headers-07](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers-07).\n`windowMs` is used for the reset value if the store does not provide a reset\ntime.\n\nIf set to `true`, it is treated as `draft-6`, however this behavior may change\nin a future semver major release.\n\nIf set to any truthy value, the middleware also sends the `Retry-After` header\non all blocked requests.\n\nThe `standardHeaders` option may be used in conjunction with, or instead of the\n`legacyHeaders` option.\n\nℹ️ Tip: use\n[ratelimit-header-parser](https://www.npmjs.com/package/ratelimit-header-parser)\nin clients to read/parse any form of express-rate-limit's headers.\n\nDefaults to `false`.\n\n> Renamed in `6.x` from `draft_polli_ratelimit_headers` to `standardHeaders`.\n\n### `requestPropertyName`\n\n> `string`\n\nThe name of the property on the Express `request` object to store the rate limit\ninfo.\n\nDefaults to `'rateLimit'`.\n\n### `skipFailedRequests`\n\n> `boolean`\n\nWhen set to `true`, failed requests won't be counted. Request considered failed\nwhen the `requestWasSuccessful` option returns `false`. By default, this means\nrequests fail when:\n\n- the response status >= 400\n- the request was cancelled before last chunk of data was sent (response `close`\n  event triggered)\n- the response `error` event was triggered by response\n\n(Technically they are counted and then un-counted, so a large number of slow\nrequests all at once could still trigger a rate-limit. This may be fixed in a\nfuture release. PRs welcome!)\n\nDefaults to `false`.\n\n### `skipSuccessfulRequests`\n\n> `boolean`\n\nIf `true`, the library will (by default) skip all requests that are considered\n'failed' by the `requestWasSuccessful` function. By default, this means requests\nsucceed when the response status code < 400.\n\n(Technically they are counted and then un-counted, so a large number of slow\nrequests all at once could still trigger a rate-limit. This may be fixed in a\nfuture release. PRs welcome!)\n\nDefaults to `false`.\n\n### `keyGenerator`\n\n> `function`\n\nMethod to retrieve custom identifiers for clients, such as their IP address,\nusername, or API Key.\n\nShould be a (sync/async) function that accepts the Express `request` and\n`response` objects and then returns a string.\n\nBy default, the client's IP address is used:\n\n```ts\nconst limiter = rateLimit({\n\t// ...\n\tkeyGenerator: (request, response) => request.ip,\n})\n```\n\n> **Note** If a `keyGenerator` returns the same value for every user, it becomes\n> a global rate limiter. This could be combined with a second instance of\n> `express-rate-limit` to have both global and per-user limits.\n\n### `handler`\n\n> `function`\n\nExpress request handler that sends back a response when a client is\nrate-limited.\n\nBy default, sends back the `statusCode` and `message` set via the `options`,\nsimilar to this:\n\n```ts\nconst limiter = rateLimit({\n\t// ...\n\thandler: (request, response, next, options) =>\n\t\tresponse.status(options.statusCode).send(options.message),\n})\n```\n\n### `onLimitReached`\n\n> `function`\n\nA (sync/async) function that accepts the Express `request` and `response`\nobjects that is called the on the request where a client has just exceeded their\nrate limit.\n\nThis method was\n[deprecated in v6](https://github.com/express-rate-limit/express-rate-limit/releases/v6.0.0) -\nPlease use a custom `handler` that checks the number of hits instead.\n\n### `skip`\n\n> `function`\n\nFunction to determine whether or not this request counts towards a client's\nquota. Should be a (sync/async) function that accepts the Express `request` and\n`response` objects and then returns `true` or `false`.\n\nCould also act as an allowlist for certain keys:\n\n```ts\nconst allowlist = ['192.168.0.56', '192.168.0.21']\n\nconst limiter = rateLimit({\n\t// ...\n\tskip: (request, response) => allowlist.includes(request.ip),\n})\n```\n\nBy default, it skips no requests:\n\n```ts\nconst limiter = rateLimit({\n\t// ...\n\tskip: (request, response) => false,\n})\n```\n\n### `requestWasSuccessful`\n\n> `function`\n\nMethod to determine whether or not the request counts as 'succesful'. Used when\neither `skipSuccessfulRequests` or `skipFailedRequests` is set to true. Should\nbe a (sync/async) function that accepts the Express `request` and `response`\nobjects and then returns `true` or `false`.\n\nBy default, requests with a response status code less than 400 are considered\nsuccessful:\n\n```ts\nconst limiter = rateLimit({\n\t// ...\n\trequestWasSuccessful: (request, response) => response.statusCode < 400,\n})\n```\n\n### `validate`\n\n> `boolean`\n\nWhen enabled, a set of validation checks are run on the first request to detect\ncommon misconfigurations with proxies, etc. Prints an error to the console if\nany issue is detected.\n\nAutomatically disables after the first request is processed.\n\nSee https://github.com/express-rate-limit/express-rate-limit/wiki/Error-Codes\nfor more info.\n\nDefaults to true.\n\n### `store`\n\n> `Store`\n\nThe `Store` to use to store the hit count for each client.\n\nBy default, the [`memory-store`](source/memory-store.ts) is used.\n\nHere is a list of external stores:\n\n| Name                                                                                   | Description                                                                                           | Legacy/Modern       |\n| -------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------- | ------------------- |\n| [`memory-store`](source/memory-store.ts)                                               | _(default)_ Simple in-memory option. Does not share state when app has multiple processes or servers. | Modern as of v6.0.0 |\n| [`rate-limit-redis`](https://npmjs.com/package/rate-limit-redis)                       | A [Redis](http://redis.io/)-backed store, more suitable for large or demanding deployments.           | Modern as of v3.0.0 |\n| [`rate-limit-memcached`](https://npmjs.org/package/rate-limit-memcached)               | A [Memcached](https://memcached.org/)-backed store.                                                   | Legacy              |\n| [`rate-limit-mongo`](https://www.npmjs.com/package/rate-limit-mongo)                   | A [MongoDB](https://www.mongodb.com/)-backed store.                                                   | Legacy              |\n| [`precise-memory-rate-limit`](https://www.npmjs.com/package/precise-memory-rate-limit) | A memory store similar to the built-in one, except that it stores a distinct timestamp for each key.  | Modern as of v2.0.0 |\n\nTake a look at\n[this guide](https://github.com/express-rate-limit/express-rate-limit/wiki/Creating-Your-Own-Store)\nif you wish to create your own store.\n\n## Request API\n\nA `request.rateLimit` property is added to all requests with the `limit`,\n`current`, and `remaining` number of requests and, if the store provides it, a\n`resetTime` Date object. These may be used in your application code to take\nadditional actions or inform the user of their status.\n\nThe property name can be configured with the configuration option\n`requestPropertyName`.\n\n## Instance API\n\n### `resetKey(key)`\n\nResets the rate limiting for a given key. An example use case is to allow users\nto complete a captcha or whatever to reset their rate limit, then call this\nmethod.\n\n## Issues and Contributing\n\nIf you encounter a bug or want to see something added/changed, please go ahead\nand\n[open an issue](https://github.com/nfriexpress-rate-limitedly/express-rate-limit/issues/new)!\nIf you need help with something, feel free to\n[start a discussion](https://github.com/express-rate-limit/express-rate-limit/discussions/new)!\n\nIf you wish to contribute to the library, thanks! First, please read\n[the contributing guide](contributing.md). Then you can pick up any issue and\nfix/implement it!\n\n## License\n\nMIT © [Nathan Friedly](http://nfriedly.com/)\n",
    "licenseText": "﻿# MIT License\n\nCopyright 2021 Nathan Friedly\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-6.11.2.tgz#6c42035603d3b52e4e2fb59f6ebaa89e628ef980",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-6.11.2.tgz",
    "hash": "6c42035603d3b52e4e2fb59f6ebaa89e628ef980",
    "integrity": "sha512-a7uwwfNTh1U60ssiIkuLFWHt4hAC5yxlLGU2VP0X4YNlyEDZAqF4tK3GD3NSitVBrCQmQ0++0uOyFOgC2y4DDw==",
    "registry": "npm",
    "packageName": "express-rate-limit",
    "cacheIntegrity": "sha512-a7uwwfNTh1U60ssiIkuLFWHt4hAC5yxlLGU2VP0X4YNlyEDZAqF4tK3GD3NSitVBrCQmQ0++0uOyFOgC2y4DDw== sha1-bEIDVgPTtS5OL7WfbrqonmKO+YA="
  },
  "registry": "npm",
  "hash": "6c42035603d3b52e4e2fb59f6ebaa89e628ef980"
}