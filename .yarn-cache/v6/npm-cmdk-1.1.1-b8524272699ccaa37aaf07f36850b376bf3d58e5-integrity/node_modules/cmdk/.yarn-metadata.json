{
  "manifest": {
    "name": "cmdk",
    "version": "1.1.1",
    "license": "MIT",
    "main": "./dist/index.js",
    "module": "./dist/index.mjs",
    "types": "./dist/index.d.ts",
    "files": [
      "dist"
    ],
    "exports": {
      ".": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.js"
      }
    },
    "peerDependencies": {
      "react": "^18 || ^19 || ^19.0.0-rc",
      "react-dom": "^18 || ^19 || ^19.0.0-rc"
    },
    "dependencies": {
      "@radix-ui/react-compose-refs": "^1.1.1",
      "@radix-ui/react-dialog": "^1.1.6",
      "@radix-ui/react-id": "^1.1.0",
      "@radix-ui/react-primitive": "^2.0.2"
    },
    "devDependencies": {
      "@types/react": "18.0.15"
    },
    "sideEffects": false,
    "repository": {
      "type": "git",
      "url": "git+https://github.com/pacocoursey/cmdk.git",
      "directory": "cmdk"
    },
    "bugs": {
      "url": "https://github.com/pacocoursey/cmdk/issues"
    },
    "homepage": "https://github.com/pacocoursey/cmdk#readme",
    "author": {
      "name": "Paco",
      "url": "https://github.com/pacocoursey"
    },
    "scripts": {
      "build": "tsup src",
      "dev": "tsup src --watch"
    },
    "_registry": "npm",
    "_loc": "/Users/schandel/Downloads/BPL Commander Project Management App (Copy)/.yarn-cache/v6/npm-cmdk-1.1.1-b8524272699ccaa37aaf07f36850b376bf3d58e5-integrity/node_modules/cmdk/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n<img src=\"./website/public/og.png\" />\n</p>\n\n# ⌘K [![cmdk minzip package size](https://img.shields.io/bundlephobia/minzip/cmdk)](https://www.npmjs.com/package/cmdk?activeTab=code) [![cmdk package version](https://img.shields.io/npm/v/cmdk.svg?colorB=green)](https://www.npmjs.com/package/cmdk)\n\n⌘K is a command menu React component that can also be used as an accessible combobox. You render items, it filters and sorts them automatically. ⌘K supports a fully composable API <sup><sup>[How?](/ARCHITECTURE.md)</sup></sup>, so you can wrap items in other components or even as static JSX.\n\nDemo and examples: [cmdk.paco.me](https://cmdk.paco.me)\n\n## Install\n\n```bash\npnpm install cmdk\n```\n\n## Use\n\n```tsx\nimport { Command } from 'cmdk'\n\nconst CommandMenu = () => {\n  return (\n    <Command label=\"Command Menu\">\n      <Command.Input />\n      <Command.List>\n        <Command.Empty>No results found.</Command.Empty>\n\n        <Command.Group heading=\"Letters\">\n          <Command.Item>a</Command.Item>\n          <Command.Item>b</Command.Item>\n          <Command.Separator />\n          <Command.Item>c</Command.Item>\n        </Command.Group>\n\n        <Command.Item>Apple</Command.Item>\n      </Command.List>\n    </Command>\n  )\n}\n```\n\nOr in a dialog:\n\n```tsx\nimport { Command } from 'cmdk'\n\nconst CommandMenu = () => {\n  const [open, setOpen] = React.useState(false)\n\n  // Toggle the menu when ⌘K is pressed\n  React.useEffect(() => {\n    const down = (e) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault()\n        setOpen((open) => !open)\n      }\n    }\n\n    document.addEventListener('keydown', down)\n    return () => document.removeEventListener('keydown', down)\n  }, [])\n\n  return (\n    <Command.Dialog open={open} onOpenChange={setOpen} label=\"Global Command Menu\">\n      <Command.Input />\n      <Command.List>\n        <Command.Empty>No results found.</Command.Empty>\n\n        <Command.Group heading=\"Letters\">\n          <Command.Item>a</Command.Item>\n          <Command.Item>b</Command.Item>\n          <Command.Separator />\n          <Command.Item>c</Command.Item>\n        </Command.Group>\n\n        <Command.Item>Apple</Command.Item>\n      </Command.List>\n    </Command.Dialog>\n  )\n}\n```\n\n## Parts and styling\n\nAll parts forward props, including `ref`, to an appropriate element. Each part has a specific data-attribute (starting with `cmdk-`) that can be used for styling.\n\n### Command `[cmdk-root]`\n\nRender this to show the command menu inline, or use [Dialog](#dialog-cmdk-dialog-cmdk-overlay) to render in a elevated context. Can be controlled with the `value` and `onValueChange` props.\n\n> **Note**\n>\n> Values are always trimmed with the [trim()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim) method.\n\n```tsx\nconst [value, setValue] = React.useState('apple')\n\nreturn (\n  <Command value={value} onValueChange={setValue}>\n    <Command.Input />\n    <Command.List>\n      <Command.Item>Orange</Command.Item>\n      <Command.Item>Apple</Command.Item>\n    </Command.List>\n  </Command>\n)\n```\n\nYou can provide a custom `filter` function that is called to rank each item. Note that the value will be trimmed.\n\n```tsx\n<Command\n  filter={(value, search) => {\n    if (value.includes(search)) return 1\n    return 0\n  }}\n/>\n```\n\nA third argument, `keywords`, can also be provided to the filter function. Keywords act as aliases for the item value, and can also affect the rank of the item. Keywords are trimmed.\n\n```tsx\n<Command\n  filter={(value, search, keywords) => {\n    const extendValue = value + ' ' + keywords.join(' ')\n    if (extendValue.includes(search)) return 1\n    return 0\n  }}\n/>\n```\n\nOr disable filtering and sorting entirely:\n\n```tsx\n<Command shouldFilter={false}>\n  <Command.List>\n    {filteredItems.map((item) => {\n      return (\n        <Command.Item key={item} value={item}>\n          {item}\n        </Command.Item>\n      )\n    })}\n  </Command.List>\n</Command>\n```\n\nYou can make the arrow keys wrap around the list (when you reach the end, it goes back to the first item) by setting the `loop` prop:\n\n```tsx\n<Command loop />\n```\n\n### Dialog `[cmdk-dialog]` `[cmdk-overlay]`\n\nProps are forwarded to [Command](#command-cmdk-root). Composes Radix UI's Dialog component. The overlay is always rendered. See the [Radix Documentation](https://www.radix-ui.com/docs/primitives/components/dialog) for more information. Can be controlled with the `open` and `onOpenChange` props.\n\n```tsx\nconst [open, setOpen] = React.useState(false)\n\nreturn (\n  <Command.Dialog open={open} onOpenChange={setOpen}>\n    ...\n  </Command.Dialog>\n)\n```\n\nYou can provide a `container` prop that accepts an HTML element that is forwarded to Radix UI's Dialog Portal component to specify which element the Dialog should portal into (defaults to `body`). See the [Radix Documentation](https://www.radix-ui.com/docs/primitives/components/dialog#portal) for more information.\n\n```tsx\nconst containerElement = React.useRef(null)\n\nreturn (\n  <>\n    <Command.Dialog container={containerElement.current} />\n    <div ref={containerElement} />\n  </>\n)\n```\n\n### Input `[cmdk-input]`\n\nAll props are forwarded to the underlying `input` element. Can be controlled with the `value` and `onValueChange` props.\n\n```tsx\nconst [search, setSearch] = React.useState('')\n\nreturn <Command.Input value={search} onValueChange={setSearch} />\n```\n\n### List `[cmdk-list]`\n\nContains items and groups. Animate height using the `--cmdk-list-height` CSS variable.\n\n```css\n[cmdk-list] {\n  min-height: 300px;\n  height: var(--cmdk-list-height);\n  max-height: 500px;\n  transition: height 100ms ease;\n}\n```\n\nTo scroll item into view earlier near the edges of the viewport, use scroll-padding:\n\n```css\n[cmdk-list] {\n  scroll-padding-block-start: 8px;\n  scroll-padding-block-end: 8px;\n}\n```\n\n### Item `[cmdk-item]` `[data-disabled?]` `[data-selected?]`\n\nItem that becomes active on pointer enter. You should provide a unique `value` for each item, but it will be automatically inferred from the `.textContent`.\n\n```tsx\n<Command.Item\n  onSelect={(value) => console.log('Selected', value)}\n  // Value is implicity \"apple\" because of the provided text content\n>\n  Apple\n</Command.Item>\n```\n\nYou can also provide a `keywords` prop to help with filtering. Keywords are trimmed.\n\n```tsx\n<Command.Item keywords={['fruit', 'apple']}>Apple</Command.Item>\n```\n\n```tsx\n<Command.Item\n  onSelect={(value) => console.log('Selected', value)}\n  // Value is implicity \"apple\" because of the provided text content\n>\n  Apple\n</Command.Item>\n```\n\nYou can force an item to always render, regardless of filtering, by passing the `forceMount` prop.\n\n### Group `[cmdk-group]` `[hidden?]`\n\nGroups items together with the given `heading` (`[cmdk-group-heading]`).\n\n```tsx\n<Command.Group heading=\"Fruit\">\n  <Command.Item>Apple</Command.Item>\n</Command.Group>\n```\n\nGroups will not unmount from the DOM, rather the `hidden` attribute is applied to hide it from view. This may be relevant in your styling.\n\nYou can force a group to always render, regardless of filtering, by passing the `forceMount` prop.\n\n### Separator `[cmdk-separator]`\n\nVisible when the search query is empty or `alwaysRender` is true, hidden otherwise.\n\n### Empty `[cmdk-empty]`\n\nAutomatically renders when there are no results for the search query.\n\n### Loading `[cmdk-loading]`\n\nYou should conditionally render this with `progress` while loading asynchronous items.\n\n```tsx\nconst [loading, setLoading] = React.useState(false)\n\nreturn <Command.List>{loading && <Command.Loading>Hang on…</Command.Loading>}</Command.List>\n```\n\n### `useCommandState(state => state.selectedField)`\n\nHook that composes [`useSyncExternalStore`](https://reactjs.org/docs/hooks-reference.html#usesyncexternalstore). Pass a function that returns a slice of the command menu state to re-render when that slice changes. This hook is provided for advanced use cases and should not be commonly used.\n\nA good use case would be to render a more detailed empty state, like so:\n\n```tsx\nconst search = useCommandState((state) => state.search)\nreturn <Command.Empty>No results found for \"{search}\".</Command.Empty>\n```\n\n## Examples\n\nCode snippets for common use cases.\n\n### Nested items\n\nOften selecting one item should navigate deeper, with a more refined set of items. For example selecting \"Change theme…\" should show new items \"Dark theme\" and \"Light theme\". We call these sets of items \"pages\", and they can be implemented with simple state:\n\n```tsx\nconst ref = React.useRef(null)\nconst [open, setOpen] = React.useState(false)\nconst [search, setSearch] = React.useState('')\nconst [pages, setPages] = React.useState([])\nconst page = pages[pages.length - 1]\n\nreturn (\n  <Command\n    onKeyDown={(e) => {\n      // Escape goes to previous page\n      // Backspace goes to previous page when search is empty\n      if (e.key === 'Escape' || (e.key === 'Backspace' && !search)) {\n        e.preventDefault()\n        setPages((pages) => pages.slice(0, -1))\n      }\n    }}\n  >\n    <Command.Input value={search} onValueChange={setSearch} />\n    <Command.List>\n      {!page && (\n        <>\n          <Command.Item onSelect={() => setPages([...pages, 'projects'])}>Search projects…</Command.Item>\n          <Command.Item onSelect={() => setPages([...pages, 'teams'])}>Join a team…</Command.Item>\n        </>\n      )}\n\n      {page === 'projects' && (\n        <>\n          <Command.Item>Project A</Command.Item>\n          <Command.Item>Project B</Command.Item>\n        </>\n      )}\n\n      {page === 'teams' && (\n        <>\n          <Command.Item>Team 1</Command.Item>\n          <Command.Item>Team 2</Command.Item>\n        </>\n      )}\n    </Command.List>\n  </Command>\n)\n```\n\n### Show sub-items when searching\n\nIf your items have nested sub-items that you only want to reveal when searching, render based on the search state:\n\n```tsx\nconst SubItem = (props) => {\n  const search = useCommandState((state) => state.search)\n  if (!search) return null\n  return <Command.Item {...props} />\n}\n\nreturn (\n  <Command>\n    <Command.Input />\n    <Command.List>\n      <Command.Item>Change theme…</Command.Item>\n      <SubItem>Change theme to dark</SubItem>\n      <SubItem>Change theme to light</SubItem>\n    </Command.List>\n  </Command>\n)\n```\n\n### Asynchronous results\n\nRender the items as they become available. Filtering and sorting will happen automatically.\n\n```tsx\nconst [loading, setLoading] = React.useState(false)\nconst [items, setItems] = React.useState([])\n\nReact.useEffect(() => {\n  async function getItems() {\n    setLoading(true)\n    const res = await api.get('/dictionary')\n    setItems(res)\n    setLoading(false)\n  }\n\n  getItems()\n}, [])\n\nreturn (\n  <Command>\n    <Command.Input />\n    <Command.List>\n      {loading && <Command.Loading>Fetching words…</Command.Loading>}\n      {items.map((item) => {\n        return (\n          <Command.Item key={`word-${item}`} value={item}>\n            {item}\n          </Command.Item>\n        )\n      })}\n    </Command.List>\n  </Command>\n)\n```\n\n### Use inside Popover\n\nWe recommend using the [Radix UI popover](https://www.radix-ui.com/docs/primitives/components/popover) component. ⌘K relies on the Radix UI Dialog component, so this will reduce your bundle size a bit due to shared dependencies.\n\n```bash\n$ pnpm install @radix-ui/react-popover\n```\n\nRender `Command` inside of the popover content:\n\n```tsx\nimport * as Popover from '@radix-ui/react-popover'\n\nreturn (\n  <Popover.Root>\n    <Popover.Trigger>Toggle popover</Popover.Trigger>\n\n    <Popover.Content>\n      <Command>\n        <Command.Input />\n        <Command.List>\n          <Command.Item>Apple</Command.Item>\n        </Command.List>\n      </Command>\n    </Popover.Content>\n  </Popover.Root>\n)\n```\n\n### Drop in stylesheets\n\nYou can find global stylesheets to drop in as a starting point for styling. See [website/styles/cmdk](website/styles/cmdk) for examples.\n\n## FAQ\n\n**Accessible?** Yes. Labeling, aria attributes, and DOM ordering tested with Voice Over and Chrome DevTools. [Dialog](#dialog-cmdk-dialog-cmdk-overlay) composes an accessible Dialog implementation.\n\n**Virtualization?** No. Good performance up to 2,000-3,000 items, though. Read below to bring your own.\n\n**Filter/sort items manually?** Yes. Pass `shouldFilter={false}` to [Command](#command-cmdk-root). Better memory usage and performance. Bring your own virtualization this way.\n\n**React 18 safe?** Yes, required. Uses React 18 hooks like `useId` and `useSyncExternalStore`.\n\n**Unstyled?** Yes, use the listed CSS selectors.\n\n**Hydration mismatch?** No, likely a bug in your code. Ensure the `open` prop to `Command.Dialog` is `false` on the server.\n\n**React strict mode safe?** Yes. Open an issue if you notice an issue.\n\n**Weird/wrong behavior?** Make sure your `Command.Item` has a `key` and unique `value`.\n\n**Concurrent mode safe?** Maybe, but concurrent mode is not yet real. Uses risky approaches like manual DOM ordering.\n\n**React server component?** No, it's a client component.\n\n**Listen for ⌘K automatically?** No, do it yourself to have full control over keybind context.\n\n**React Native?** No, and no plans to support it. If you build a React Native version, let us know and we'll link your repository here.\n\n## History\n\nWritten in 2019 by Paco ([@pacocoursey](https://twitter.com/pacocoursey)) to see if a composable combobox API was possible. Used for the Vercel command menu and autocomplete by Rauno ([@raunofreiberg](https://twitter.com/raunofreiberg)) in 2020. Re-written independently in 2022 with a simpler and more performant approach. Ideas and help from Shu ([@shuding\\_](https://twitter.com/shuding_)).\n\n[use-descendants](https://github.com/pacocoursey/use-descendants) was extracted from the 2019 version.\n\n## Testing\n\nFirst, install dependencies and Playwright browsers:\n\n```bash\npnpm install\npnpm playwright install\n```\n\nThen ensure you've built the library:\n\n```bash\npnpm build\n```\n\nThen run the tests using your local build against real browser engines:\n\n```bash\npnpm test\n```\n",
    "description": "⌘K is a command menu React component that can also be used as an accessible combobox. You render items, it filters and sorts them automatically. ⌘K supports a fully composable API <sup><sup>[How?](/ARCHITECTURE.md)</sup></sup>, so you can wrap items in other components or even as static JSX.",
    "licenseText": "MIT License\n\nCopyright (c) 2022 Paco Coursey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/cmdk/-/cmdk-1.1.1.tgz#b8524272699ccaa37aaf07f36850b376bf3d58e5",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/cmdk/-/cmdk-1.1.1.tgz",
    "hash": "b8524272699ccaa37aaf07f36850b376bf3d58e5",
    "integrity": "sha512-Vsv7kFaXm+ptHDMZ7izaRsP70GgrW9NBNGswt9OZaVBLlE0SNpDq8eu/VGXyF9r7M0azK3Wy7OlYXsuyYLFzHg==",
    "registry": "npm",
    "packageName": "cmdk",
    "cacheIntegrity": "sha512-Vsv7kFaXm+ptHDMZ7izaRsP70GgrW9NBNGswt9OZaVBLlE0SNpDq8eu/VGXyF9r7M0azK3Wy7OlYXsuyYLFzHg== sha1-uFJCcmmcyqN6rwfzaFCzdr89WOU="
  },
  "registry": "npm",
  "hash": "b8524272699ccaa37aaf07f36850b376bf3d58e5"
}