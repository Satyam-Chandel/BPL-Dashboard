{
  "manifest": {
    "name": "react-resizable-panels",
    "version": "2.1.9",
    "description": "React components for resizable panel groups/layouts",
    "author": {
      "name": "Brian Vaughn",
      "email": "brian.david.vaughn@gmail.com"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/bvaughn/react-resizable-panels.git"
    },
    "source": "src/index.ts",
    "main": "dist/react-resizable-panels.cjs.js",
    "module": "dist/react-resizable-panels.esm.js",
    "files": [
      "dist",
      "package.json",
      "README.md",
      "LICENSE"
    ],
    "exports": {
      ".": {
        "types": {
          "import": "./dist/react-resizable-panels.cjs.mjs",
          "default": "./dist/react-resizable-panels.cjs.js"
        },
        "development": {
          "browser": {
            "module": "./dist/react-resizable-panels.browser.development.esm.js",
            "import": "./dist/react-resizable-panels.browser.development.cjs.mjs",
            "default": "./dist/react-resizable-panels.browser.development.cjs.js"
          },
          "node": {
            "module": "./dist/react-resizable-panels.development.node.esm.js",
            "import": "./dist/react-resizable-panels.development.node.cjs.mjs",
            "default": "./dist/react-resizable-panels.development.node.cjs.js"
          },
          "module": "./dist/react-resizable-panels.development.esm.js",
          "import": "./dist/react-resizable-panels.development.cjs.mjs",
          "default": "./dist/react-resizable-panels.development.cjs.js"
        },
        "browser": {
          "module": "./dist/react-resizable-panels.browser.esm.js",
          "import": "./dist/react-resizable-panels.browser.cjs.mjs",
          "default": "./dist/react-resizable-panels.browser.cjs.js"
        },
        "node": {
          "module": "./dist/react-resizable-panels.node.esm.js",
          "import": "./dist/react-resizable-panels.node.cjs.mjs",
          "default": "./dist/react-resizable-panels.node.cjs.js"
        },
        "module": "./dist/react-resizable-panels.esm.js",
        "import": "./dist/react-resizable-panels.cjs.mjs",
        "default": "./dist/react-resizable-panels.cjs.js"
      },
      "./package.json": "./package.json"
    },
    "imports": {
      "#is-development": {
        "development": "./src/env-conditions/development.ts",
        "default": "./src/env-conditions/production.ts"
      },
      "#is-browser": {
        "browser": "./src/env-conditions/browser.ts",
        "node": "./src/env-conditions/node.ts",
        "default": "./src/env-conditions/unknown.ts"
      }
    },
    "types": "dist/react-resizable-panels.cjs.d.ts",
    "devDependencies": {
      "@babel/plugin-proposal-nullish-coalescing-operator": "7.18.6",
      "@babel/plugin-proposal-optional-chaining": "7.21.0",
      "eslint": "^8.37.0",
      "eslint-plugin-react-hooks": "^4.6.0",
      "jest": "^29.7.0",
      "jest-environment-jsdom": "^29.7.0",
      "react": "experimental",
      "react-dom": "experimental"
    },
    "peerDependencies": {
      "react": "^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc",
      "react-dom": "^16.14.0 || ^17.0.0 || ^18.0.0 || ^19.0.0 || ^19.0.0-rc"
    },
    "browserslist": [
      "Chrome 79"
    ],
    "scripts": {
      "clear": "pnpm run clear:builds & pnpm run clear:node_modules",
      "clear:builds": "rm -rf ./packages/*/dist",
      "clear:node_modules": "rm -rf ./node_modules",
      "lint": "eslint \"src/**/*.{ts,tsx}\"",
      "test": "jest --config=jest.config.js",
      "test:watch": "jest --config=jest.config.js --watch",
      "watch": "parcel watch --port=2345"
    },
    "_registry": "npm",
    "_loc": "/Users/schandel/Downloads/BPL Commander Project Management App (Copy)/.yarn-cache/v6/npm-react-resizable-panels-2.1.9-874847710f4f122df749b5f08ebe9c72a1e338ca-integrity/node_modules/react-resizable-panels/package.json",
    "readmeFilename": "README.md",
    "readme": "# react-resizable-panels\n\nReact components for resizable panel groups/layouts\n\n```jsx\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\n\n<PanelGroup autoSaveId=\"example\" direction=\"horizontal\">\n  <Panel defaultSize={25}>\n    <SourcesExplorer />\n  </Panel>\n  <PanelResizeHandle />\n  <Panel>\n    <SourceViewer />\n  </Panel>\n  <PanelResizeHandle />\n  <Panel defaultSize={25}>\n    <Console />\n  </Panel>\n</PanelGroup>;\n```\n\n## If you like this project, ðŸŽ‰ [become a sponsor](https://github.com/sponsors/bvaughn/) or â˜• [buy me a coffee](http://givebrian.coffee/)\n\n## Props\n\n### `PanelGroup`\n\n| prop         | type                         | description                                                      |\n| :----------- | :--------------------------- | :--------------------------------------------------------------- |\n| `autoSaveId` | `?string`                    | Unique id used to auto-save group arrangement via `localStorage` |\n| `children`   | `ReactNode`                  | Arbitrary React element(s)                                       |\n| `className`  | `?string`                    | Class name to attach to root element                             |\n| `direction`  | `\"horizontal\" \\| \"vertical\"` | Group orientation                                                |\n| `id`         | `?string`                    | Group id; falls back to `useId` when not provided                |\n| `onLayout`   | `?(sizes: number[]) => void` | Called when group layout changes                                 |\n| `storage`    | `?PanelGroupStorage`         | Custom storage API; defaults to `localStorage` <sup>1</sup>      |\n| `style`      | `?CSSProperties`             | CSS style to attach to root element                              |\n| `tagName`    | `?string = \"div\"`            | HTML element tag name for root element                           |\n\n<sup>1</sup>: Storage API must define the following _synchronous_ methods:\n\n- `getItem: (name:string) => string`\n- `setItem: (name: string, value: string) => void`\n\n`PanelGroup` components also expose an imperative API for manual resizing:\n| method                        | description                                                      |\n| :---------------------------- | :--------------------------------------------------------------- |\n| `getId(): string`             | Gets the panel group's ID.                                       |\n| `getLayout(): number[]`       | Gets the panel group's current _layout_ (`[1 - 100, ...]`).      |\n| `setLayout(layout: number[])` | Resize panel group to the specified _layout_ (`[1 - 100, ...]`). |\n\n### `Panel`\n\n| prop            | type                      | description                                                                                   |\n| :-------------- | :------------------------ | :-------------------------------------------------------------------------------------------- |\n| `children`      | `ReactNode`               | Arbitrary React element(s)                                                                    |\n| `className`     | `?string`                 | Class name to attach to root element                                                          |\n| `collapsedSize` | `?number=0`               | Panel should collapse to this size                                                            |\n| `collapsible`   | `?boolean=false`          | Panel should collapse when resized beyond its `minSize`                                       |\n| `defaultSize`   | `?number`                 | Initial size of panel (numeric value between 1-100)                                           |\n| `id`            | `?string`                 | Panel id (unique within group); falls back to `useId` when not provided                       |\n| `maxSize`       | `?number = 100`           | Maximum allowable size of panel (numeric value between 1-100); defaults to `100`              |\n| `minSize`       | `?number = 10`            | Minimum allowable size of panel (numeric value between 1-100); defaults to `10`               |\n| `onCollapse`    | `?() => void`             | Called when panel is collapsed                                                                |\n| `onExpand`      | `?() => void`             | Called when panel is expanded                                                                 |\n| `onResize`      | `?(size: number) => void` | Called when panel is resized; `size` parameter is a numeric value between 1-100. <sup>1</sup> |\n| `order`         | `?number`                 | Order of panel within group; required for groups with conditionally rendered panels           |\n| `style`         | `?CSSProperties`          | CSS style to attach to root element                                                           |\n| `tagName`       | `?string = \"div\"`         | HTML element tag name for root element                                                        |\n\n<sup>1</sup>: If any `Panel` has an `onResize` callback, the `order` prop should be provided for all `Panel`s.\n\n`Panel` components also expose an imperative API for manual resizing:\n| method                   | description                                                                        |\n| :----------------------- | :--------------------------------------------------------------------------------- |\n| `collapse()`             | If panel is `collapsible`, collapse it fully.                                      |\n| `expand()`               | If panel is currently _collapsed_, expand it to its most recent size.              |\n| `getId(): string`        | Gets the ID of the panel.                                                          |\n| `getSize(): number`      | Gets the current size of the panel as a percentage (`1 - 100`).                    |\n| `isCollapsed(): boolean` | Returns `true` if the panel is currently _collapsed_ (`size === 0`).               |\n| `isExpanded(): boolean`  | Returns `true` if the panel is currently _not collapsed_ (`!isCollapsed()`).       |\n| `getSize(): number`      | Returns the most recently committed size of the panel as a percentage (`1 - 100`). |\n| `resize(size: number)`   | Resize panel to the specified _percentage_ (`1 - 100`).                            |\n\n### `PanelResizeHandle`\n\n| prop             | type                                          | description                                                                     |\n| :--------------- | :-------------------------------------------- | :------------------------------------------------------------------------------ |\n| `children`       | `?ReactNode`                                  | Custom drag UI; can be any arbitrary React element(s)                           |\n| `className`      | `?string`                                     | Class name to attach to root element                                            |\n| `hitAreaMargins` | `?{ coarse: number = 15; fine: number = 5; }` | Allow this much margin when determining resizable handle hit detection          |\n| `disabled`       | `?boolean`                                    | Disable drag handle                                                             |\n| `id`             | `?string`                                     | Resize handle id (unique within group); falls back to `useId` when not provided |\n| `onDragging`     | `?(isDragging: boolean) => void`              | Called when group layout changes                                                |\n| `style`          | `?CSSProperties`                              | CSS style to attach to root element                                             |\n| `tagName`        | `?string = \"div\"`                             | HTML element tag name for root element                                          |\n\n---\n\n## FAQ\n\n### Can panel sizes be specified in pixels?\n\nNo. Pixel-based constraints [added significant complexity](https://github.com/bvaughn/react-resizable-panels/pull/176) to the initialization and validation logic and so I've decided not to support them. You may be able to implement a version of this yourself following [a pattern like this](https://github.com/bvaughn/react-resizable-panels/issues/46#issuecomment-1368108416) but it is not officially supported by this library.\n\n### How can I fix layout/sizing problems with conditionally rendered panels?\n\nThe `Panel` API doesn't _require_ `id` and `order` props because they aren't necessary for static layouts. When panels are conditionally rendered though, it's best to supply these values.\n\n```tsx\n<PanelGroup direction=\"horizontal\">\n  {renderSideBar && (\n    <>\n      <Panel id=\"sidebar\" minSize={25} order={1}>\n        <Sidebar />\n      </Panel>\n      <PanelResizeHandle />\n    </>\n  )}\n  <Panel minSize={25} order={2}>\n    <Main />\n  </Panel>\n</PanelGroup>\n```\n\n### Can a attach a ref to the DOM elements?\n\nNo. I think exposing two refs (one for the component's imperative API and one for a DOM element) would be awkward. This library does export several utility methods for accessing the underlying DOM elements though. For example:\n\n```tsx\nimport {\n  getPanelElement,\n  getPanelGroupElement,\n  getResizeHandleElement,\n  Panel,\n  PanelGroup,\n  PanelResizeHandle,\n} from \"react-resizable-panels\";\n\nexport function Example() {\n  const refs = useRef();\n\n  useEffect(() => {\n    const groupElement = getPanelGroupElement(\"group\");\n    const leftPanelElement = getPanelElement(\"left-panel\");\n    const rightPanelElement = getPanelElement(\"right-panel\");\n    const resizeHandleElement = getResizeHandleElement(\"resize-handle\");\n\n    // If you want to, you can store them in a ref to pass around\n    refs.current = {\n      groupElement,\n      leftPanelElement,\n      rightPanelElement,\n      resizeHandleElement,\n    };\n  }, []);\n\n  return (\n    <PanelGroup direction=\"horizontal\" id=\"group\">\n      <Panel id=\"left-panel\">{/* ... */}</Panel>\n      <PanelResizeHandle id=\"resize-handle\" />\n      <Panel id=\"right-panel\">{/* ... */}</Panel>\n    </PanelGroup>\n  );\n}\n```\n\n### Why don't I see any resize UI?\n\nThis likely means that you haven't applied any CSS to style the resize handles. By default, a resize handle is just an empty DOM element. To add styling, use the `className` or `style` props:\n\n```tsx\n// Tailwind example\n<PanelResizeHandle className=\"w-2 bg-blue-800\" />\n```\n\n### Can panel sizes be persistent?\n\nYes. Panel groups with an `autoSaveId` prop will automatically save and restore their layouts on mount.\n\n### How can I use persistent layouts with SSR?\n\nBy default, this library uses `localStorage` to persist layouts. With server rendering, this can cause a flicker when the default layout (rendered on the server) is replaced with the persisted layout (in `localStorage`). The way to avoid this flicker is to also persist the layout with a cookie like so:\n\n#### Server component\n\n```tsx\nimport ResizablePanels from \"@/app/ResizablePanels\";\nimport { cookies } from \"next/headers\";\n\nexport function ServerComponent() {\n  const layout = cookies().get(\"react-resizable-panels:layout\");\n\n  let defaultLayout;\n  if (layout) {\n    defaultLayout = JSON.parse(layout.value);\n  }\n\n  return <ClientComponent defaultLayout={defaultLayout} />;\n}\n```\n\n#### Client component\n\n```tsx\n\"use client\";\n\nimport { Panel, PanelGroup, PanelResizeHandle } from \"react-resizable-panels\";\n\nexport function ClientComponent({\n  defaultLayout = [33, 67],\n}: {\n  defaultLayout: number[] | undefined;\n}) {\n  const onLayout = (sizes: number[]) => {\n    document.cookie = `react-resizable-panels:layout=${JSON.stringify(sizes)}`;\n  };\n\n  return (\n    <PanelGroup direction=\"horizontal\" onLayout={onLayout}>\n      <Panel defaultSize={defaultLayout[0]}>{/* ... */}</Panel>\n      <PanelResizeHandle className=\"w-2 bg-blue-800\" />\n      <Panel defaultSize={defaultLayout[1]}>{/* ... */}</Panel>\n    </PanelGroup>\n  );\n}\n```\n\n> [!NOTE]\n> Be sure to specify a `defaultSize` prop for **every** `Panel` component to avoid layout flicker.\n\nA demo of this is available [here](https://github.com/bvaughn/react-resizable-panels-demo-ssr).\n\n#### How can I set the [CSP `\"nonce\"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce) attribute?\n\n```js\nimport { setNonce } from \"react-resizable-panels\";\n\nsetNonce(\"your-nonce-value-here\");\n```\n\n#### How can I disable global cursor styles?\n\n```js\nimport { disableGlobalCursorStyles } from \"react-resizable-panels\";\n\ndisableGlobalCursorStyles();\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2023 Brian Vaughn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.npmjs.org/react-resizable-panels/-/react-resizable-panels-2.1.9.tgz#874847710f4f122df749b5f08ebe9c72a1e338ca",
    "type": "tarball",
    "reference": "https://registry.npmjs.org/react-resizable-panels/-/react-resizable-panels-2.1.9.tgz",
    "hash": "874847710f4f122df749b5f08ebe9c72a1e338ca",
    "integrity": "sha512-z77+X08YDIrgAes4jl8xhnUu1LNIRp4+E7cv4xHmLOxxUPO/ML7PSrE813b90vj7xvQ1lcf7g2uA9GeMZonjhQ==",
    "registry": "npm",
    "packageName": "react-resizable-panels",
    "cacheIntegrity": "sha512-z77+X08YDIrgAes4jl8xhnUu1LNIRp4+E7cv4xHmLOxxUPO/ML7PSrE813b90vj7xvQ1lcf7g2uA9GeMZonjhQ== sha1-h0hHcQ9PEi33SbXwjr6ccqHjOMo="
  },
  "registry": "npm",
  "hash": "874847710f4f122df749b5f08ebe9c72a1e338ca"
}